{"version":3,"sources":["assets/loader.gif","components/SeriesList/index.js","components/intro/index.js","components/Loader/index.js","containers/Series/index.js","components/SingleSeriesItem/index.js","containers/SingleSeries/index.js","containers/Character/index.js","components/Main/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","SeriesListItem","series","to","show","id","name","SeriesList","props","className","list","map","key","Intro","message","Loader","style","width","alt","src","loaderSrc","Series","state","seriesName","isFetching","onSeriesInputChange","e","setState","target","value","fetch","then","response","json","this","type","onChange","length","trim","Component","SingleCharacter","person","character","image","medium","SingleSeriesItem","show_cast","allimages","i","premiered","rating","average","_embedded","episodes","SingleSeries","match","params","Character","characterimage","personimage","location","hash","split","Main","exact","path","component","App","Boolean","window","hostname","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.3e09b2ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.63eb7825.gif\";","import React from 'react';\r\nimport './index.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst SeriesListItem = ({ series }) => (\r\n    <li>\r\n        <Link to={`series/${series.show.id}`}>\r\n            {series.show.name}\r\n        </Link>\r\n    </li>\r\n)\r\n\r\nconst SeriesList = (props) => {\r\n    return (\r\n        <div>\r\n            <ul className='series-list'>\r\n                {props.list.map(series => (\r\n                     <SeriesListItem series={series} key={series.show.id}/>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SeriesList;","import React from 'react';\r\n\r\n\r\nconst Intro = (props) => (\r\n    <p className=\"App-intro\">\r\n      { props.message }\r\n    </p>\r\n  );\r\n\r\nexport default Intro;","import React from 'react';\r\nimport loaderSrc from '../../assets/loader.gif';\r\n\r\n\r\nconst Loader = props => (\r\n    <div>\r\n        <img \r\n            style={{width: 90}}\r\n            alt=\"Loader icon\"\r\n            src={ loaderSrc }\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default  Loader;","import React, { Component } from 'react';\r\nimport './index.css';\r\nimport SeriesList from '../../components/SeriesList';\r\nimport Intro from '../../components/intro';\r\nimport Loader from '../../components/Loader';\r\n\r\nclass Series extends Component {\r\n\r\n    state = {\r\n        series: [],\r\n        seriesName:'',\r\n        isFetching: false\r\n      }\r\n\r\n    onSeriesInputChange = e => {\r\n        this.setState({ seriesName:e.target.value, isFetching:true});\r\n        fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\r\n            .then(response => response.json())\r\n            .then(json => this.setState({ series: json, isFetching:false }))\r\n    }\r\n    \r\n    render() {\r\n        const { series, seriesName, isFetching } = this.state;\r\n        return (\r\n            <div>\r\n                <Intro message=\"Here  you can find all of your most loved series\"/>\r\n                <div>\r\n                    <input \r\n                        value={seriesName}\r\n                        type=\"text\" \r\n                        onChange={this.onSeriesInputChange}>\r\n                    </input>\r\n                </div>\r\n                {  !isFetching && series.length === 0 && seriesName.trim() === ''\r\n                    &&\r\n                    <p>Please enter series name into the input</p>\r\n                }\r\n                { !isFetching && series.length === 0 && seriesName.trim() !== ''\r\n                && \r\n                <p>No TV series found with this name</p>\r\n                }\r\n                { isFetching && <Loader />}\r\n                { !isFetching && <SeriesList list={this.state.series} />}\r\n                \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Series;","import React, { Component } from 'react';\r\nimport './index.css';\r\nimport Loader from '../../components/Loader';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst SingleCharacter = ({ person }) => (\r\n    \r\n\r\n    <li>\r\n        <Link to={`character/${person.character.name + '##' + person.character.image.medium || \"\" + '##' + person.person.image.medium || \"\"}`} >\r\n            {person.character.name}\r\n        </Link>\r\n    </li>\r\n)\r\n\r\nclass SingleSeriesItem extends Component {\r\n\r\n    render() {\r\n        const { show, show_cast } = this.props;\r\n        var allimages = true;\r\n        if(show_cast){\r\n            for (var i=0; i<show_cast.length; i++){\r\n                if (!show_cast[i].person.image){\r\n                    allimages = false;\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            \r\n            <div>\r\n                { show === null && <Loader />}                \r\n                { \r\n                    show !== null\r\n                    &&\r\n                    <div>\r\n                        <p>{ show.name }</p>\r\n                        <p>Premiered - {show.premiered}</p>\r\n                        <p>Rating - {show.rating.average}</p>\r\n                        <p>Episodes - {show._embedded.episodes.length}</p>\r\n                        <p>\r\n                            <img alt=\"show\" src={show.image.medium} />\r\n                        </p>\r\n                    </div>\r\n                }\r\n                \r\n                { show_cast  && allimages\r\n                && \r\n                <ul className='series-cast'>\r\n                    {show_cast.map(person => (\r\n                        <SingleCharacter key={person.character.id} person={person}/>\r\n                    ))}\r\n                </ul> \r\n                }\r\n                { show_cast  && !allimages\r\n                && \r\n                <ul className='series-cast'>\r\n                    {show_cast.map(person => (\r\n                        <li key={person.character.id} >{person.name}</li>\r\n                    ))}\r\n                </ul> \r\n                }\r\n                           \r\n                </div>\r\n            \r\n        )   \r\n        \r\n    }\r\n}\r\n\r\nexport default SingleSeriesItem;","import React, { Component } from 'react';\r\nimport SingleSeriesItem from '../../components/SingleSeriesItem';\r\n\r\nclass SingleSeries extends Component {\r\n    state = {\r\n        show:null,\r\n        show_cast:null\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n        \r\n        fetch(`http://api.tvmaze.com/shows/${id}?embed=episodes`)\r\n        .then(response => response.json())\r\n        .then(json => this.setState({ show: json, isFetching:false }))\r\n\r\n        fetch(`http://api.tvmaze.com/shows/${id}/cast`)\r\n        .then(response => response.json())\r\n        .then(json => this.setState({ show_cast: json }))\r\n\r\n    }\r\n\r\n    render() {\r\n        const { show, show_cast } = this.state;\r\n        return (\r\n            \r\n            <div>\r\n                <SingleSeriesItem show={show} show_cast={show_cast}/>              \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default SingleSeries;","import React, { Component } from 'react';\r\nimport Loader from '../../components/Loader';\r\n\r\n\r\n\r\nclass Character extends Component {\r\n    state = {\r\n        name:null,\r\n        characterimage:null,\r\n        personimage:null\r\n       \r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        const { id} = this.props.match.params;\r\n        const { hash } = this.props.location;\r\n        const characterimage = hash.split('##');   \r\n        this.setState({name:id, characterimage:characterimage[1], personimage:characterimage[2]})\r\n    }\r\n\r\n    render() {\r\n\r\n        return (           \r\n            \r\n            <div>\r\n                {!this.state.name && <Loader />}\r\n                {this.state.name &&\r\n\r\n                    <div className=\"character\">\r\n                        {this.state.name} <br /><br />\r\n                        <img src={this.state.characterimage} />\r\n                    </div>\r\n                }\r\n                {this.state.personimage &&\r\n                    <div className=\"person\">\r\n                        <b />\r\n                        <img src={this.state.personimage} />\r\n                    </div> \r\n\r\n                }\r\n                              \r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Character;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Series from '../../containers/Series';\r\nimport SingleSeries from '../../containers/SingleSeries';\r\nimport Character from '../../containers/Character';\r\n\r\nconst Main = props => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Series} />\r\n        <Route exact path=\"/series/:id\" component={SingleSeries} />\r\n        <Route exact path=\"/series/character/:id\" component={Character} />\r\n    </Switch>\r\n);\r\n\r\nexport default Main;\r\n\r\n","import React, { Component } from 'react';\nimport Main from '../Main';\nimport './App.css';\nimport 'whatwg-fetch';\n\n\n\n\nclass App extends Component {\n\n  render () {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">          \n          <Main />\n        </header>\n      </div>\n    );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={\"tv-series-app\"}>\n      <App />\n    </BrowserRouter>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}